
#
# Mnemonic Maps
#
mmap new  -reuse -name {Boolean as Logic} -radix %b -contents {{%c=FALSE -edgepriority 1 -shape low}
{%c=TRUE -edgepriority 1 -shape high}}
mmap new  -reuse -name {Example Map} -radix %x -contents {{%b=11???? -bgcolor orange -label REG:%x -linecolor yellow -shape bus}
{%x=1F -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=2C -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=* -label %x -linecolor gray -shape bus}}

array unset createdGroup
array set createdGroup {}
#
# Groups
#
if {[catch {group get -using [list m1]}]} {
set createdGroup([list m1]) 1
catch {group new -name m1 -overlay 0}
}
if {[catch {group get -using [list m0]}]} {
set createdGroup([list m0]) 1
catch {group new -name m0 -overlay 0}
}
if {[catch {group get -using [list slave]}]} {
set createdGroup([list slave]) 1
catch {group new -name slave -overlay 0}
}
if {[info exists createdGroup([list m1])]} {
group using m1
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {top.DUT.hgrant[1]}]} ] \
    [subst  {[format {top.DUT.m_busreq[1]}]} ] \
    [subst  {[format {top.DUT.m_haddr[63:32]}]} ] \
    [subst  {[format {top.DUT.m_hwdata[63:32]}]} ] \
    [subst  {[format {top.DUT.m_htrans[3:2]}]} ]
}

if {[info exists createdGroup([list m0])]} {
group using m0
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {top.DUT.hgrant[0]}]} ] \
    [subst  {[format {top.DUT.m_busreq[0]}]} ] \
    [subst  {[format {top.DUT.m_haddr[31:0]}]} ] \
    [subst  {[format {top.DUT.m_hwdata[31:0]}]} ] \
    [subst  {[format {top.DUT.m_htrans[1:0]}]} ]
}

if {[info exists createdGroup([list slave])]} {
group using slave
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {top.DUT.s_hsel[3:0]}]} ] \
    [subst  {[format {top.DUT.s_hready[3:0]}]} ] \
    [subst  {[format {top.DUT.s_htrans_out[1:0]}]} ] \
    [subst  {[format {top.DUT.s_addr_out[31:0]}]} ] \
    [subst  {[format {top.DUT.s_data_out[31:0]}]} ]
}

set id [waveform add -signals [subst  {
	{[format {top.DUT.m_busreq[8:0]}]}
	} ]]
waveform hierarchy collapse $id
set id [waveform add -signals [subst  {
	{[format {top.DUT.hclk}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.hgrant[8:0]}]}
	} ]]
waveform hierarchy collapse $id
set id [waveform add -signals [subst  {
	{[format {top.DUT.hreset}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.m_haddr[287:0]}]}
	} ]]
waveform hierarchy set -expandtype words $id
waveform hierarchy collapse $id
set id [waveform add -signals [subst  {
	{[format {top.DUT.m_hready}]}
	} ]]
waveform hierarchy set -expandtype words $id

set groupId0 [waveform add -groups m1]


set groupId0 [waveform add -groups m0]


set groupId0 [waveform add -groups slave]

set id [waveform add -signals [subst  {
	{[format {top.DUT.m_hburst[26:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.m_hlock[8:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.m_hrdata[31:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.m_hresp[1:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.m_hsize[26:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.m_htrans[17:0]}]}
	} ]]
waveform hierarchy set -expandtype 2 $id
waveform hierarchy collapse $id
set id [waveform add -signals [subst  {
	{[format {top.DUT.m_hwdata[287:0]}]}
	} ]]
waveform hierarchy set -expandtype words $id
waveform hierarchy collapse $id
set id [waveform add -signals [subst  {
	{[format {top.DUT.m_hwrite[8:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.s_hburst_out[2:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.s_hmaster[2:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.s_hmaster_lock}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.s_hrdata[127:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.s_hresp[7:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.s_hsize[2:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {top.DUT.s_hwrite}]}
	} ]]

waveform xview limits 15ns 180ns
