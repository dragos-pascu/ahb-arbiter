module top(
);
    parameter master_number = 9;
    parameter slave_number = 11;
	parameter size_out	= 4;
    
    //inputs

    logic[32*master_number-1:0] m_hwdata; //write data
	logic[32*master_number-1:0] m_haddr; //address 
	logic[3*master_number-1:0] m_hburst;
	logic[2*master_number-1:0] m_htrans;
	logic hclk; // clock
	logic hreset; // RESET - active low
	logic [slave_number-1:0] s_hready; // slave ready
	logic[master_number-1:0] m_busreq; // m_busreq
	logic[master_number-1:0] m_hlock; // master lock
    logic[2*slave_number-1:0] s_hresp; //*  slave response
    logic[2:0] m_hsize;//* 
    logic[master_number-1:0]m_hwrite;
    logic[32*slave_number-1:0] s_hrdata;// to do


    //outputs

    logic[2:0] s_hburst_out;
    logic[1:0] s_htrans_out;
    logic s_hmaster_lock;
    logic[31:0] s_data_out;
    logic[31:0] s_addr_out;
    logic[size_out-1:0] s_hmaster;
    logic s_hwrite; // to do
    logic[master_number-1:0] hgrant;//*
    logic[1:0] m_hresp;// to do
    logic m_hready;// to do
    logic[2:0] s_hsize;// to do
    logic[slave_number-1:0] s_hsel;// to do
    logic[31:0] m_hrdata;// to do

    logic clk;
    logic reset;

    generic_arbiter_full dut (.hclk(clk), .hreset(reset) , .*);

    initial begin
    clk <= 0;
    reset <= 0;
    forever #5ns  clk = ~clk;
    end

    
    initial begin

    
    /* Write */

    m_busreq = 1;
    m_hlock = 1;

    // m_busreq= 'b000000100;
    // m_hlock = 'b000000100;

    #15ns;
    reset = 1;
    m_haddr= 50;
    s_hready = 1;
    m_hburst = 0;
    m_htrans = 0;
    m_hsize = 2;
    m_hwrite = 1;
    s_hresp = 0;
    m_hwdata = 'd20;

    /* Read */


    // m_busreq= 'b000000000;
    // m_hlock = 'b000000000;


    // #15ns;
    // reset = 1;
    // m_hwrite = 0;
    // s_hready = 1;
    // s_hresp = 0;
    // m_haddr= 12;
    // s_hrdata = 32;
    
    // m_hburst = 0;
    // m_htrans = 0;
    // m_hsize = 2;


    /* Write with wait cycle */

    // m_busreq = 1;
    // m_hlock = 1;
    
    // #15ns;
    // reset = 1;
    // m_hwrite = 1;
    // m_haddr= 50;
    // m_hwdata = 'd20;

    // m_hburst = 0;
    // m_htrans = 0;
    // m_hsize = 2;

    // s_hready = 1;
    // s_hresp = 0;
    // #5ns
    // s_hready = 0;
    // #15ns
    // s_hready = 1;

    /* Read with wait cycle */

    // m_busreq= 1;
    // m_hlock = 1;


    // #15ns;
    // reset = 1;
    // #5ns
    // m_hwrite = 0;
    
    // m_haddr= 12;
    // s_hrdata = 32;
    
    // m_hburst = 0;
    // m_htrans = 0;
    // m_hsize = 2;

    // s_hready = 1;
    // s_hresp = 0;

    // #10ns
    // s_hready = 0;
    // #15ns
    // s_hready = 1;


    /* 4 beat incrementing burst write transfer*/

    // m_busreq = 1;
    // m_hlock = 1;

    // #15ns;
    // reset = 1;
    // m_haddr= 'h38;
    // m_hwdata = 'd20;

    // m_hsize = 2;
    // m_hwrite = 1;
    // m_hburst = 'b011; //4incr

    // s_hready = 1;
    // s_hresp = 0;

    
    
    // m_htrans = 'b01; //noseq
    // #10ns
    // m_haddr= 'h3C;
    // m_hwdata = 44;
    // m_htrans = 'b11; //noseq

    // #10ns
    // m_haddr= 'h40;
    // m_hwdata = 66;

    // #10ns
    // m_haddr= 'h44;
    // m_hwdata = 103;



    
    end
    
    initial begin
    
    #100ns;
    $finish();
    end

endmodule